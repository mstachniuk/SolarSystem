package com.blogspot.mstachniuk.solarsystem;

import com.blogspot.mstachniuk.solarsystem.vo.Distance;
import com.blogspot.mstachniuk.solarsystem.vo.Speed;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;


/**
 * {@link Planet} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PlanetAssert extends AbstractAssert<PlanetAssert, Planet> {

  /**
   * Creates a new <code>{@link PlanetAssert}</code> to make assertions on actual Planet.
   * @param actual the Planet we want to make assertions on.
   */
  public PlanetAssert(Planet actual) {
    super(actual, PlanetAssert.class);
  }

  /**
   * An entry point for PlanetAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myPlanet)</code> and get specific assertion with code completion.
   * @param actual the Planet we want to make assertions on.
   * @return a new <code>{@link PlanetAssert}</code>
   */
  public static PlanetAssert assertThat(Planet actual) {
    return new PlanetAssert(actual);
  }

  /**
   * Verifies that the actual Planet's acceleration is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param acceleration the value to compare the actual Planet's acceleration to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Planet's acceleration is not close enough to the given value.
   */
  public PlanetAssert hasAcceleration(double acceleration, double offset) {
    // check that actual Planet we want to make assertions on is not null.
    isNotNull();

    double actualAcceleration = actual.getAcceleration();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpected acceleration:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualAcceleration, acceleration, offset, Math.abs(acceleration - actualAcceleration));
    
    // check
    Assertions.assertThat(actualAcceleration).overridingErrorMessage(assertjErrorMessage).isCloseTo(acceleration, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Planet's atmosphereGases contains the given Gas elements.
   * @param atmosphereGases the given elements that should be contained in actual Planet's atmosphereGases.
   * @return this assertion object.
   * @throws AssertionError if the actual Planet's atmosphereGases does not contain all given Gas elements.
   */
  public PlanetAssert hasAtmosphereGases(Gas... atmosphereGases) {
    // check that actual Planet we want to make assertions on is not null.
    isNotNull();

    // check that given Gas varargs is not null.
    if (atmosphereGases == null) throw new AssertionError("Expecting atmosphereGases parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    org.assertj.core.internal.Iterables.instance().assertContains(info, actual.getAtmosphereGases(), atmosphereGases);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Planet has no atmosphereGases.
   * @return this assertion object.
   * @throws AssertionError if the actual Planet's atmosphereGases is not empty.
   */
  public PlanetAssert hasNoAtmosphereGases() {
    // check that actual Planet we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have atmosphereGases but had :\n  <%s>";
    
    // check
    if (actual.getAtmosphereGases().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getAtmosphereGases());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Planet's avgOrbitalSpeed is equal to the given one.
   * @param avgOrbitalSpeed the given avgOrbitalSpeed to compare the actual Planet's avgOrbitalSpeed to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Planet's avgOrbitalSpeed is not equal to the given one.
   */
  public PlanetAssert hasAvgOrbitalSpeed(Speed avgOrbitalSpeed) {
    // check that actual Planet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected avgOrbitalSpeed of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Speed actualAvgOrbitalSpeed = actual.getAvgOrbitalSpeed();
    if (!org.assertj.core.util.Objects.areEqual(actualAvgOrbitalSpeed, avgOrbitalSpeed)) {
      failWithMessage(assertjErrorMessage, actual, avgOrbitalSpeed, actualAvgOrbitalSpeed);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Planet's diameter is equal to the given one.
   * @param diameter the given diameter to compare the actual Planet's diameter to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Planet's diameter is not equal to the given one.
   */
  public PlanetAssert hasDiameter(Distance diameter) {
    // check that actual Planet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected diameter of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Distance actualDiameter = actual.getDiameter();
    if (!org.assertj.core.util.Objects.areEqual(actualDiameter, diameter)) {
      failWithMessage(assertjErrorMessage, actual, diameter, actualDiameter);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Planet's name is equal to the given one.
   * @param name the given name to compare the actual Planet's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Planet's name is not equal to the given one.
   */
  public PlanetAssert hasName(String name) {
    // check that actual Planet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!org.assertj.core.util.Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Planet's rotationDirection is equal to the given one.
   * @param rotationDirection the given rotationDirection to compare the actual Planet's rotationDirection to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Planet's rotationDirection is not equal to the given one.
   */
  public PlanetAssert hasRotationDirection(RotationDirection rotationDirection) {
    // check that actual Planet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected rotationDirection of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    RotationDirection actualRotationDirection = actual.getRotationDirection();
    if (!org.assertj.core.util.Objects.areEqual(actualRotationDirection, rotationDirection)) {
      failWithMessage(assertjErrorMessage, actual, rotationDirection, actualRotationDirection);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Planet's siderealYear is equal to the given one.
   * @param siderealYear the given siderealYear to compare the actual Planet's siderealYear to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Planet's siderealYear is not equal to the given one.
   */
  public PlanetAssert hasSiderealYear(SiderealYear siderealYear) {
    // check that actual Planet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected siderealYear of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    SiderealYear actualSiderealYear = actual.getSiderealYear();
    if (!org.assertj.core.util.Objects.areEqual(actualSiderealYear, siderealYear)) {
      failWithMessage(assertjErrorMessage, actual, siderealYear, actualSiderealYear);
    }

    // return the current assertion for method chaining
    return this;
  }

}
